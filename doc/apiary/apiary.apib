FORMAT: 1A
HOST: http://cygnus.lab.fiware.org/

# FIWARE-Cygnus API (v1)

FIWARE-CYGNUS API (v1).

This is a cookbook with commands that show how to use FIWARE cygnus API.
It's a work in progress and is changing on a daily basis.

Please check the following [FIWARE Open Specification Legal Notice (implicit patents license)]
(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_(implicit_patents_license))
to understand the rights to use this document.


# Description

This resource allows you to obtain a list of subresources published by the API:

* version of the current running cygnus on your system
* statistics about the configured Flume components
* useful information about configured grouping rules like:
  * current grouping rules configured
  * add, update or delete current grouping rules

## Error responses

Error list (HTTP response code in parenthesis):

* BadFields             (`400`). The incoming JSON payload cannot be parsed.
* WrongFields           (`400`). The incoming request has invalid fields.
* WrongSubscription     (`400`). Orion cant do the subscription.
* BadRequest            (`400`). The request is invalid.
* InternalServerError   (`500`). Internal error in the server.

## Group Version API

## Gets the version of the running Cygnus [GET /v1/version]

+ Request

       GET http://<cygnus_host>:<management_port>/v1/version

+ Response 200 (application/json)

       [
            {
              "success": "true",
              "version": "0.13.0_SNAPSHOT.52399574ea8503aa8038ad14850380d77529b550"
            }
       ]

## Group Statistics API

## Get stats of Flume components [GET /v1/stats]

+ Request

       GET http://<cygnus_host>:<management_port>/v1/stats

+ Response 200 (application/json)

       [
          {
              "stats": {
              "channels": [
                    {
                        "name": "mysql-channel",
                        "num_events": 0,
                        "num_puts_failed": 0,
                        "num_puts_ok": 11858,
                        "num_takes_failed": 1,
                        "num_takes_ok": 11858,
                        "setup_time": "2016-02-05T10:34:25.80Z",
                        "status": "START"
                    }
                  ],
              "sinks": [
                    {
                        "name": "mysql-sink",
                        "num_persisted_events": 11800,
                        "num_processed_events": 11858,
                        "setup_time": "2016-02-05T10:34:24.978Z",
                        "status": "START"
                    }
                  ],
              "sources": [
                    {
                        "name": "http-source",
                        "num_processed_events": 11858,
                        "num_received_events": 11858,
                        "setup_time": "2016-02-05T10:34:24.921Z",
                        "status": "START"
                    }
                  ]
              },
              "success": "true"
          }
        ]

## Resets the statistics about the configured Flume components [PUT /v1/stats]

+ Request

       PUT http://<cygnus_host>:<management_port>/v1/stats

+ Response 200 (application/json)

        {
            "success":"true"
        }

## Group Grouping Rules API

### Get current grouping rules [GET /v1/groupingrules]

+ Request

       GET http://<cygnus_host>:<management_port>/v1/groupingrules

+ Response 200 (application/json)

        [
            {
                "grouping_rules": [
                        {
                            "destination": "allcars",
                            "fields": [
                                  "entityType"
                                  ],
                            "fiware_service_path": "cars",
                            "id": 1,
                            "regex": "Car"
                        },
                        {
                             "destination": "allrooms",
                             "fields": [
                                  "entityType"
                                  ],
                            "fiware_service_path": "rooms",
                            "id": 2,
                            "regex": "Room"
                        }
                    ],
                "success": "true"
            }
        ]

### Adds a new rule [POST /v1/groupingrules]

+ Parameters

       + id: 1 (number) - An unique identifier of the message.

+ Request

       POST http://<cygnus_host>:<management_port>/v1/groupingrules
       {
           "regex": "Room",
           "destination": "allrooms",
           "fiware_service_path": "rooms",
           "fields": ["entityType"]
       }

+ Response 200 (application/json)

       {
           "success":"true"
       }

### Update an already existent grouping rules [PUT /v1/groupingrules]

+ Parameters

       + id: 1 (number) - An unique identifier of the message.

+ Request

       PUT http://<cygnus_host>:<management_port>/v1/groupingrules=id=1
       {
           "regex": "Room",
           "destination": "otherrooms",
           "fiware_service_path": "rooms",
           "fields": ["entityType"]
      }

+ Response 200 (application/json)

        [
            {"success":"true"}
        ]


### Delete a grouping rules [DELETE /v1/groupingrules]

+ Parameters

       + id: 1 (number) - An unique identifier of the message.

+ Request

       DELETE "http://<cygnus_host>:<management_port>/v1/groupingrules?id=2"

+ Response 200 (application/json)

       [
           {"success":"true"}
       ]


## Group Subscriptions API

### Creates a new subscription to Orion [POST /v1/subscriptions]

+ Request

       POST "http://<cygnus_host>:<management_port>/v1/subscriptions"
       {
           "subscription":{
           "entities": [
                   {
                       "type": "Room",
                       "isPattern": "false",
                       "id": "Room1"
                   }
               ],
           "attributes": [],
           "reference": "http://<reference_host>:<reference_port>",
           "duration": "P1M",
           "notifyConditions": [
                   {
                       "type": "ONCHANGE",
                      "condValues": []
                   }
               ],
           "throttling": "PT5S"
           },
           "endpoint":{
                   "host":"<endpoint_host>",
                   "port":"<endpoint_port>",
                   "ssl":"false",
                   "xauthtoken":"234123123123123"
           }
       }

+ Response 200 (application/json)

        {
            "success":"true",
            "result" : {
                    {
                      "subscribeResponse":{
                                  "duration":"P1M",
                                  "throttling":"PT5S",
                                  "subscriptionId":"56f9081c3c6fb7e9d2a912a0"
                        }
                    }
              }
        }

+ Response 400 (application/json)

        {
            "success":"true",
            "result" : {
                    "subscribeError": {
                                "errorCode": {
                                        "code":"400",
                                        "reasonPhrase":"Bad Request",
                                        "details":"JSON Parse Error: unknown field: \/extraField"
                                }
                    }
            }
        }

+ Response 400 (application/json)

        {
            "success":"false",
            "error":"Invalid subscription, field 'duration' is empty"
        }

+ Response 400 (application/json)

        {
            "success":"false",
            "error":"Invalid subscription, field 'notifyConditions' is missing"
        }


### Deletes a current subscription to Orion [DELETE /v1/subscriptions]

+ Parameters

       + ngsi_version: 1 or 2 (Defines the Orion API's version)
       + subscription_id: <subscriptionId> (Subscription's identificator)

+ Request

       DELETE http://<cygnus_host>:<management_port>/v1/subscriptions?subscription_id=<subscriptionId>&ngsi_version=<ngsiVersion>

+ Response 204 (application/json)

       {"success":"true","result" : {" Subscription deleted "}}

+ Response 400 (application/json)

       {"success":"false","error":"Parse error, wrong parameter (subscription_id). Check it for errors."}

       {"success":"false","error":"Parse error, wrong parameter (ngsi_version). Check it for errors."}

+ Response 400 (application/json)

       {"success":"false","result" : {
               {"subscriptionId":"571872a9c0585c7451571be4","statusCode":{
                       "code":"404","reasonPhrase":"No context element found","details":"subscriptionId: \/571872a9c0585c7451571be4\/"
                      }
               }
       }

+ Response 400 (application/json)

       {"success":"false","result" : {
               {"description":"The requested subscription has not been found. Check id","error":"NotFound"}
            }
       }

+ Response 400 (application/json)

       {"success":"false","error":"Empty Auth-Token. Required for DELETE subscriptions"}

       {"success":"false","error":"Missing Auth-Token. Required for DELETE subscriptions"}


## Group Admin API

### Gets the log4j configuration [GET /admin/log]

+ Request

       GET http://<cygnus_host>:<management_port>/admin/log

+ Response 200 (application/json)

       {
           "log4j": {
           "appenders": [
               {
                   "layout": "...",
                   "name": "..."
               }
            ],
            "level": "..."
           },
           "success": "true"
       }

+ Response 500 (application/json)

       {
           "error": "..."
       }

### Update the logging level of Cygnus [PUT /admin/log]

+ Parameters

        + loglevel: Must be DEBUG, INFO, WARN, ERROR o FATAL (String) - A valid log level.

+ Request

       PUT http://<cygnus_host>:<management_port>/admin/log?level=<log_level>

+ Response 200 (text/plain)

       OK

+ Response 400 (application/json)

       {
           "error":"Invalid log level"
       }

+ Response 400 (application/json)

       {
           "error":""
       }
